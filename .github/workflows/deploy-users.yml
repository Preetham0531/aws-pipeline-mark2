name: Deploy Users Module

on:
  push:
    branches: [ main ]
    paths:
      - 'modules/users/**/*.py'
      - 'modules/users/config.json'
      - 'template.yaml'
      - 'scripts/**/*.py'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      STAGE: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Diagnostics (AWS identity and tooling)
        run: |
          aws --version || true
          aws sts get-caller-identity || true
          echo "AWS_REGION=$AWS_REGION" && echo "STAGE=$STAGE"
          echo "Exporting AWS_DEFAULT_REGION for boto3"
          echo "AWS_DEFAULT_REGION=$AWS_REGION" >> $GITHUB_ENV
          sam --version || true
          python --version
          pip --version
          echo "Workflow triggered for USERS module"

      - name: SAM Build
        run: sam build --use-container --debug

      - name: SAM Deploy (users only)
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-s3 \
            --stack-name project-shared \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides StageName=${{ env.STAGE }} \
            --debug

      - name: Install script deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install boto3

      - name: Sync API routes for users
        run: |
          python scripts/sync_routes.py --module users --stage ${{ env.STAGE }}

      - name: Post-deploy diagnostics (CFN/API/Lambda)
        if: always()
        run: |
          echo "=== STS identity ===" && aws sts get-caller-identity || true
          echo "=== CFN stacks ===" && aws cloudformation describe-stacks --stack-name project-shared || true
          echo "=== CFN recent events ===" && aws cloudformation describe-stack-events --stack-name project-shared --max-items 20 || true
          echo "=== API Gateway lookup ===" && aws apigateway get-rest-apis --query 'items[?name==`MainApiGateway`]' || true
          echo "=== Lambda functions (project-*) ===" && aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `project-`)==`true`].[FunctionName,LastModified]' --output table || true


